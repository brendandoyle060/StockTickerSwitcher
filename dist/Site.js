(()=>{"use strict";var t,e={110:(t,e,r)=>{r.d(e,{C:()=>o});var o=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()}},r={};function o(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,o),i.exports}o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=o(110),function(){function e(t,e){this.name=t,this.baseUrl=e}e.prototype.is=function(){return this.name},e.prototype.createUrlForTicker=function(t){},e.prototype.getTickerType=function(e,r,o){return e.isEtf(o)?new t.C("etf"):e.isCrypto(r)?new t.C("crypto"):new t.C("stock")},e.prototype.isCrypto=function(t){},e.prototype.isEtf=function(t){}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2l0ZS5qcyIsIm1hcHBpbmdzIjoiMkRBQUEsaUJBSUksV0FBWUEsR0FFUixHQUxKLEtBQUFDLFlBQWMsQ0FBQyxRQUFTLE1BQU8sYUFBYyxTQUFVLFNBQVUsUUFJN0RELEVBQWFBLEVBQVdFLGNBQWNDLFFBQ2xDQyxLQUFLQyxZQUFZTCxHQUdqQixNQUFNLElBQUlNLE1BQU0sdUJBQXlCTixHQUZ6Q0ksS0FBS0csTUFBUVAsQ0FJckIsQ0FhSixPQVhJLFlBQUFLLFlBQUEsU0FBWUcsR0FDUixPQUFPSixLQUFLSCxZQUFZUSxTQUFTRCxFQUNyQyxFQUVBLFlBQUFFLFNBQUEsV0FDSSxPQUFPTixLQUFLRyxLQUNoQixFQUVBLFlBQUFJLE9BQUEsU0FBT0MsR0FDSCxPQUFPUixLQUFLRyxRQUFVSyxFQUFLTCxLQUMvQixFQUNKLEVBeEJBLEUsR0NDSU0sRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhRSxRQUdyQixJQUFJQyxFQUFTTixFQUF5QkUsR0FBWSxDQUdqREcsUUFBUyxDQUFDLEdBT1gsT0FIQUUsRUFBb0JMLEdBQVVJLEVBQVFBLEVBQU9ELFFBQVNKLEdBRy9DSyxFQUFPRCxPQUNmLENDckJBSixFQUFvQk8sRUFBSSxDQUFDSCxFQUFTSSxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hSLEVBQW9CVSxFQUFFRixFQUFZQyxLQUFTVCxFQUFvQlUsRUFBRU4sRUFBU0ssSUFDNUVFLE9BQU9DLGVBQWVSLEVBQVNLLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxJQUUxRSxFQ05EVCxFQUFvQlUsRUFBSSxDQUFDSyxFQUFLQyxJQUFVTCxPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxHLFNDR2xGLFdBSUksV0FBWUksRUFBY0MsR0FDdEIvQixLQUFLOEIsS0FBT0EsRUFDWjlCLEtBQUsrQixRQUFVQSxDQUNuQixDQUVBLFlBQUFDLEdBQUEsV0FDSSxPQUFPaEMsS0FBSzhCLElBQ2hCLEVBRUEsWUFBQUcsbUJBQUEsU0FBbUJDLEdBQWlCLEVBRXBDLFlBQUFDLGNBQUEsU0FBY0MsRUFBWUMsRUFBZ0JDLEdBQ3RDLE9BQUlGLEVBQUtHLE1BQU1ELEdBQ0osSUFBSSxJQUFXLE9BQ2ZGLEVBQUtJLFNBQVNILEdBQ2QsSUFBSSxJQUFXLFVBRWYsSUFBSSxJQUFXLFFBRTlCLEVBSUEsWUFBQUcsU0FBQSxTQUFTQyxHQUFjLEVBQ3ZCLFlBQUFGLE1BQUEsU0FBTUQsR0FBMEIsQ0FDcEMsQ0E3QkEsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3JvYmluaG9vZHRveWFob29maW5hbmNlLy4vc3JjL3RpY2tlcnMvVGlja2VyVHlwZS50cyIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcm9iaW5ob29kdG95YWhvb2ZpbmFuY2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS8uL3NyYy9zaXRlcy9TaXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUaWNrZXJUeXBlIHtcbiAgICBWQUxJRF9UWVBFUyA9IFtcInN0b2NrXCIsIFwiZXRmXCIsIFwibXV0dWFsZnVuZFwiLCBcImNyeXB0b1wiLCBcImZ1dHVyZVwiLCBcImJvbmRcIl07XG4gICAgdmFsdWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHRpY2tlclR5cGU6IHN0cmluZykge1xuICAgICAgICB0aWNrZXJUeXBlID0gdGlja2VyVHlwZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZFR5cGUodGlja2VyVHlwZSkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aWNrZXJUeXBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0aWNrZXJUeXBlOiBcIiArIHRpY2tlclR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNWYWxpZFR5cGUodHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5WQUxJRF9UWVBFUy5pbmNsdWRlcyh0dCk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgZXF1YWxzKHRoYXQ6IFRpY2tlclR5cGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IHRoYXQudmFsdWU7XG4gICAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgeyBUaWNrZXIgfSBmcm9tIFwiLi4vdGlja2Vycy9UaWNrZXJcIjtcbmltcG9ydCB7IFRpY2tlclR5cGUgfSBmcm9tIFwiLi4vdGlja2Vycy9UaWNrZXJUeXBlXCI7XG5cbmV4cG9ydCBjbGFzcyBTaXRlIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYmFzZVVybDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBiYXNlVXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICB9XG5cbiAgICBpcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICBjcmVhdGVVcmxGb3JUaWNrZXIodGlja2VyOiBUaWNrZXIpIHt9XG5cbiAgICBnZXRUaWNrZXJUeXBlKHNpdGU6IFNpdGUsIGNyeXB0b0FyZzogYW55LCBkb2N1bWVudDogRG9jdW1lbnQpOiBUaWNrZXJUeXBlIHtcbiAgICAgICAgaWYgKHNpdGUuaXNFdGYoZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpY2tlclR5cGUoXCJldGZcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoc2l0ZS5pc0NyeXB0byhjcnlwdG9BcmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpY2tlclR5cGUoXCJjcnlwdG9cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpY2tlclR5cGUoXCJzdG9ja1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiB0eXBlIGhlcmUgaXMgXCJhbnlcIiwgYmVjYXVzZSB3ZSBkb24ndCB3YW50IHRvIHJldHVybiBhIHZhbHVlIGluIHRoZSBzdXBlcmNsYXNzLCB3aGljaCB3ZSB3b3VsZCBoYXZlIHRvIHNpbmNlIHdlJ3JlIHVzaW5nIHRoZW0gaW4gZ2V0VGlja2VyVHlwZSBhYm92ZS5cbiAgICAvLyBJbXBsZW1lbnRhdGlvbnMgb2YgdGhlc2UgbWV0aG9kcyBpbiBzdWJjbGFzc2VzIHNob3VsZCByZXR1cm4gYSBib29sZWFuLlxuICAgIGlzQ3J5cHRvKHg6IGFueSk6IGFueSB7fVxuICAgIGlzRXRmKGRvY3VtZW50OiBEb2N1bWVudCk6IGFueSB7fVxufVxuIl0sIm5hbWVzIjpbInRpY2tlclR5cGUiLCJWQUxJRF9UWVBFUyIsInRvTG93ZXJDYXNlIiwidHJpbSIsInRoaXMiLCJpc1ZhbGlkVHlwZSIsIkVycm9yIiwidmFsdWUiLCJ0dCIsImluY2x1ZGVzIiwidG9TdHJpbmciLCJlcXVhbHMiLCJ0aGF0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmFtZSIsImJhc2VVcmwiLCJpcyIsImNyZWF0ZVVybEZvclRpY2tlciIsInRpY2tlciIsImdldFRpY2tlclR5cGUiLCJzaXRlIiwiY3J5cHRvQXJnIiwiZG9jdW1lbnQiLCJpc0V0ZiIsImlzQ3J5cHRvIiwieCJdLCJzb3VyY2VSb290IjoiIn0=