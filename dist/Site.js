(()=>{"use strict";var t,e={110:(t,e,o)=>{o.d(e,{C:()=>r});var r=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()}},o={};function r(t){var n=o[t];if(void 0!==n)return n.exports;var i=o[t]={exports:{}};return e[t](i,i.exports,r),i.exports}r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=r(110),function(){function e(t,e){this.EXCEPTION_TICKERS=new Map,this.name=t,this.baseUrl=e}e.prototype.is=function(){return this.name},e.prototype.createUrlForTicker=function(t){},e.prototype.getTicker=function(t,e){},e.prototype.getTickerType=function(e,o,r){return e.isEtf(r)?new t.C("etf"):e.isCrypto(o)?new t.C("crypto"):new t.C("stock")},e.prototype.getName=function(t){},e.prototype.isCrypto=function(t){},e.prototype.isEtf=function(t){},e.prototype.isNoResultsPage=function(t){},e.prototype.isTickerUrl=function(t){}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,