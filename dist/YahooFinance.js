(()=>{"use strict";var t,e,r,o,n={199:(t,e,r)=>{r.d(e,{T:()=>n});var o=r(110),n=function(){function t(t,e){this.name=t,this.baseUrl=e}return t.prototype.is=function(){return this.name},t.prototype.createUrlForTicker=function(t){},t.prototype.getTickerType=function(t,e,r){return t.isEtf(r)?new o.C("etf"):t.isCrypto(e)?new o.C("crypto"):new o.C("stock")},t.prototype.isCrypto=function(t){},t.prototype.isEtf=function(t){},t}()},219:(t,e,r)=>{r.d(e,{v:()=>o});var o=function(){function t(t,e,r){this.symbol=t,this.name=this.removeExtraWhitespace(e),this.tickerType=r}return t.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),r=t.split(e),o="";return r.forEach((function(t){o=o+t.trim()+" "})),o.trim()},t.prototype.toString=function(){return"Ticker - symbol: ".concat(this.symbol,", name: ").concat(this.name,", type: ").concat(this.tickerType)},t.prototype.equals=function(t){return this.symbol===t.symbol&&this.nameEquals(t.name)&&this.tickerType.equals(t.tickerType)},t.prototype.nameEquals=function(t){var e=this.name.toLowerCase();return t=t.toLowerCase(),e.includes(t)||t.includes(e)},t}()},110:(t,e,r)=>{r.d(e,{C:()=>o});var o=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()}},i={};function c(t){var e=i[t];if(void 0!==e)return e.exports;var r=i[t]={exports:{}};return n[t](r,r.exports,c),r.exports}c.d=(t,e)=>{for(var r in e)c.o(e,r)&&!c.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},c.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),e=c(199),r=c(219),t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)},o=function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function o(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)},function(t){function e(){return t.call(this,"YahooFinance","https://finance.yahoo.com")||this}o(e,t),e.prototype.createUrlForTicker=function(t){var e=t.symbol;return"crypto"===t.tickerType.value&&(e+="-USD"),"".concat(this.baseUrl,"/quote/").concat(e)},e.prototype.getTicker=function(t,e){return new r.v(this.getTickerFromPage(e,this.isCrypto(e)),this.getName(e),this.getTickerType(this,e,e))},e.prototype.getQuoteHeaderInfoId=function(){return"#quote-header-info"},e.prototype.getName=function(t){var e=this.getCompanyHeader(t).split(" (")[0];return this.removeExtraWhitespace(e)},e.prototype.getTickerFromPage=function(t,e){var r=this.getCompanyHeader(t).split(" (")[1];return r=r.split(")")[0],e&&(r=r.split("-")[0]),r},e.prototype.getCompanyHeader=function(t){return t.querySelector(this.getQuoteHeaderInfoId()+" h1").textContent.trim()},e.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),r=t.split(e),o="";return r.forEach((function(t){o=o+t.trim()+" "})),o.trim()},e.prototype.isCrypto=function(t){return t.querySelector(this.getQuoteHeaderInfoId()+"").textContent.includes("CoinMarketCap")},e.prototype.isEtf=function(t){var e=t.querySelector("#quote-summary");return this.removeExtraWhitespace(e.textContent).includes("Net Assets")}}(e.T)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBRUEsWUFBQVosU0FBQSxTQUFTRixHQUlMLE9BSHNCQSxFQUFTMEQsY0FDM0JqRSxLQUFLNkQsdUJBQXlCLElBRVhLLFlBQVlyQyxTQUFTLGdCQUNoRCxFQUVBLFlBQUFyQixNQUFBLFNBQU1ELEdBQ0YsSUFBSTRELEVBQWU1RCxFQUFTMEQsY0FBYyxrQkFJMUMsT0FIb0JqRSxLQUFLYSxzQkFDckJzRCxFQUFhRCxhQUVJckMsU0FBUyxhQUNsQyxDQUNKLENBL0VBLENBQWtDLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS8uL3NyYy9zaXRlcy9TaXRlLnRzIiwid2VicGFjazovL3JvYmluaG9vZHRveWFob29maW5hbmNlLy4vc3JjL3RpY2tlcnMvVGlja2VyLnRzIiwid2VicGFjazovL3JvYmluaG9vZHRveWFob29maW5hbmNlLy4vc3JjL3RpY2tlcnMvVGlja2VyVHlwZS50cyIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vcm9iaW5ob29kdG95YWhvb2ZpbmFuY2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS8uL3NyYy9zaXRlcy9ZYWhvb0ZpbmFuY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGlja2VyIH0gZnJvbSBcIi4uL3RpY2tlcnMvVGlja2VyXCI7XG5pbXBvcnQgeyBUaWNrZXJUeXBlIH0gZnJvbSBcIi4uL3RpY2tlcnMvVGlja2VyVHlwZVwiO1xuXG5leHBvcnQgY2xhc3MgU2l0ZSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJhc2VVcmw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgYmFzZVVybDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgfVxuXG4gICAgaXMoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICBjcmVhdGVVcmxGb3JUaWNrZXIodGlja2VyOiBUaWNrZXIpOiBhbnkge31cblxuICAgIGdldFRpY2tlclR5cGUoc2l0ZTogU2l0ZSwgY3J5cHRvQXJnOiBhbnksIGRvY3VtZW50OiBEb2N1bWVudCk6IFRpY2tlclR5cGUge1xuICAgICAgICBpZiAoc2l0ZS5pc0V0Zihkb2N1bWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGlja2VyVHlwZShcImV0ZlwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaXRlLmlzQ3J5cHRvKGNyeXB0b0FyZykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGlja2VyVHlwZShcImNyeXB0b1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVGlja2VyVHlwZShcInN0b2NrXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIHR5cGUgaGVyZSBpcyBcImFueVwiLCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGEgdmFsdWUgaW4gdGhlIHN1cGVyY2xhc3MsIHdoaWNoIHdlIHdvdWxkIGhhdmUgdG8gc2luY2Ugd2UncmUgdXNpbmcgdGhlbSBpbiBnZXRUaWNrZXJUeXBlIGFib3ZlLlxuICAgIC8vIEltcGxlbWVudGF0aW9ucyBvZiB0aGVzZSBtZXRob2RzIGluIHN1YmNsYXNzZXMgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uXG4gICAgaXNDcnlwdG8oeDogYW55KTogYW55IHt9XG4gICAgaXNFdGYoZG9jdW1lbnQ6IERvY3VtZW50KTogYW55IHt9XG59XG4iLCJpbXBvcnQgeyBUaWNrZXJUeXBlIH0gZnJvbSBcIi4vVGlja2VyVHlwZVwiO1xuXG5leHBvcnQgY2xhc3MgVGlja2VyIHtcbiAgICBzeW1ib2w6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdGlja2VyVHlwZTogVGlja2VyVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKHN5bWJvbDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHRpY2tlclR5cGU6IFRpY2tlclR5cGUpIHtcbiAgICAgICAgdGhpcy5zeW1ib2wgPSBzeW1ib2w7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMucmVtb3ZlRXh0cmFXaGl0ZXNwYWNlKG5hbWUpO1xuICAgICAgICB0aGlzLnRpY2tlclR5cGUgPSB0aWNrZXJUeXBlO1xuICAgIH1cblxuICAgIHJlbW92ZUV4dHJhV2hpdGVzcGFjZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoXCJcXFxccytcIik7XG4gICAgICAgIGxldCBzcGxpdCA9IHN0ci5zcGxpdChyZWdleCk7XG4gICAgICAgIGxldCBmdWxsID0gXCJcIjtcbiAgICAgICAgc3BsaXQuZm9yRWFjaChmdW5jdGlvbiAod29yZCkge1xuICAgICAgICAgICAgZnVsbCA9IGZ1bGwgKyB3b3JkLnRyaW0oKSArIFwiIFwiO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gR2V0IHJpZCBvZiB0aGUgb25lIGV4dHJhIHNwYWNlIGF0IHRoZSBlbmQgYmVmb3JlIHdlIHJldHVyblxuICAgICAgICByZXR1cm4gZnVsbC50cmltKCk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBUaWNrZXIgLSBzeW1ib2w6ICR7dGhpcy5zeW1ib2x9LCBuYW1lOiAke3RoaXMubmFtZX0sIHR5cGU6ICR7dGhpcy50aWNrZXJUeXBlfWA7XG4gICAgfVxuXG4gICAgZXF1YWxzKHRoYXQ6IFRpY2tlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5zeW1ib2wgPT09IHRoYXQuc3ltYm9sICYmXG4gICAgICAgICAgICB0aGlzLm5hbWVFcXVhbHModGhhdC5uYW1lKSAmJlxuICAgICAgICAgICAgdGhpcy50aWNrZXJUeXBlLmVxdWFscyh0aGF0LnRpY2tlclR5cGUpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdG8gc2VlIGlmIGEgZ2l2ZW4gY29tcGFueSdzIG5hbWUgbWF0Y2hlcyB0aGlzIGNvbXBhbnkncyBuYW1lLlxuICAgICAqIFNpbmNlIHRoZXNlIHZhbHVlcyBhcmUgYmVpbmcgcHVsbGVkIGZyb20gZWFjaCBzaXRlIHdlJ3JlIHZpc2l0aW5nIChhbmQgd2UgY2FuJ3QgY29udHJvbCB3aGF0IHRoZXkgY2FsbCB0aGVtKSxcbiAgICAgKiBhbmQgc2luY2UgdGhlc2UgZXF1YWxpdHkgZnVuY3Rpb25zIGFyZSAoYXQgbGVhc3Qgc28gZmFyKSBvbmx5IGJlaW5nIHVzZWQgdG8gZmFjaWxpdGF0ZSB1bml0IHRlc3RpbmcgYW55d2F5LFxuICAgICAqIHRoaXMgZnVuY3Rpb24gaXMgYmFzaWNhbGx5IGp1c3QgY2hlY2tpbmcgdG8gc2VlIGlmIHRoZSBuYW1lcyBhcmUgXCJjbG9zZSBlbm91Z2hcIiBieSBjaGVja2luZyB0byBzZWUgaWYgb25lIHN0cmluZyBpbmNsdWRlcyB0aGUgb3RoZXIuXG4gICAgICpcbiAgICAgKiBGb3IgZXhhbXBsZSwgdGhlIFJIIHBhZ2UgZm9yICRTUFkgY2FsbHMgaXQgXCJTUERSIFMmUCA1MDAgRVRGXCIsIHdoaWxlIFlGIGNhbGxzIGl0IFwiU1BEUiBTJlAgNTAwIEVURiBUcnVzdFwiLlxuICAgICAqIEV2ZW4gdGhvdWdoIHRoZSBzdHJpbmdzIGFyZW4ndCBpZGVudGljYWwsIHdlIHN0aWxsIHdhbnQgdGhlc2UgdG8gYmUgY29uc2lkZXJlZCBlcXVhbCwgc28gd2UgY2FuIGp1c3QgY2hlY2sgaWYgb25lIGNvbnRhaW5zIHRoZSBvdGhlciwgd2hpY2ggaXQgZG9lcy5cbiAgICAgKlxuICAgICAqIFRPRE8gLSB0aGVyZSB3aWxsIHByb2JhYmx5IGJlIHNvbWUgZWRnZSBjYXNlcyBmb3Igd2hpY2ggdGhpcyBzb2x1dGlvbiB3aWxsIG5vdCB3b3JrLCBzbyB0aGlzIHdpbGwgbGlrZWx5IGhhdmUgdG8gYmUgcmV2aXNlZCBpbiB0aGUgZnV0dXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRoYXROYW1lIC0gbmFtZSBvZiB0aGUgY29tcGFueSB0byB3aGljaCB3ZSdyZSBjb21wYXJpbmcgdGhpcyBjb21wYW55XG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgY29tcGFuaWVzJyBuYW1lcyBhcmUgdGhlIHNhbWUgKG9yIGF0IGxlYXN0LCBjbG9zZSBlbm91Z2gpXG4gICAgICovXG4gICAgbmFtZUVxdWFscyh0aGF0TmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCB0aGlzTmFtZSA9IHRoaXMubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB0aGF0TmFtZSA9IHRoYXROYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXNOYW1lLmluY2x1ZGVzKHRoYXROYW1lKSB8fCB0aGF0TmFtZS5pbmNsdWRlcyh0aGlzTmFtZSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFRpY2tlclR5cGUge1xuICAgIFZBTElEX1RZUEVTID0gW1wic3RvY2tcIiwgXCJldGZcIiwgXCJtdXR1YWxmdW5kXCIsIFwiY3J5cHRvXCIsIFwiZnV0dXJlXCIsIFwiYm9uZFwiXTtcbiAgICB2YWx1ZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IodGlja2VyVHlwZTogc3RyaW5nKSB7XG4gICAgICAgIHRpY2tlclR5cGUgPSB0aWNrZXJUeXBlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkVHlwZSh0aWNrZXJUeXBlKSkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRpY2tlclR5cGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHRpY2tlclR5cGU6IFwiICsgdGlja2VyVHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1ZhbGlkVHlwZSh0dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLlZBTElEX1RZUEVTLmluY2x1ZGVzKHR0KTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBlcXVhbHModGhhdDogVGlja2VyVHlwZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gdGhhdC52YWx1ZTtcbiAgICB9XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCB7IFNpdGUgfSBmcm9tIFwiLi9TaXRlXCI7XG5pbXBvcnQgeyBUaWNrZXJUeXBlIH0gZnJvbSBcIi4uL3RpY2tlcnMvVGlja2VyVHlwZVwiO1xuaW1wb3J0IHsgVGlja2VyIH0gZnJvbSBcIi4uL3RpY2tlcnMvVGlja2VyXCI7XG5cbmV4cG9ydCBjbGFzcyBZYWhvb0ZpbmFuY2UgZXh0ZW5kcyBTaXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJZYWhvb0ZpbmFuY2VcIiwgYGh0dHBzOi8vZmluYW5jZS55YWhvby5jb21gKTtcbiAgICB9XG5cbiAgICBjcmVhdGVVcmxGb3JUaWNrZXIodGlja2VyOiBUaWNrZXIpOiBzdHJpbmcge1xuICAgICAgICBsZXQgczogc3RyaW5nID0gdGlja2VyLnN5bWJvbDtcblxuICAgICAgICAvLyBJZiB0aGUgcGFnZSB0aGF0IHdlJ3JlIG9uIGlzIGZvciBhIHN0b2NrIG9yIEVURiwgdGhlbiB3ZSBjYW4ganVzdCBsZWF2ZSB0aGUgdGlja2VyIGFzLWlzLlxuICAgICAgICAvLyBJZiB0aGUgcGFnZSB0aGF0IHdlJ3JlIG9uIGlzIGZvciBhIGNyeXB0b2N1cnJlbmN5LCB0aGVuIHdlIG5lZWRcbiAgICAgICAgLy8gdG8gYWRqdXN0IHRoZSB0aWNrZXIgdG8gYWRkIHRoZSBcInF1b3RlIGN1cnJlbmN5XCIgLS1cbiAgICAgICAgLy8gdGhlIGN1cnJlbmN5IGZvciB3aGljaCB3ZSdyZSBkaXNwbGF5aW5nIHRoZSBleGNoYW5nZSByYXRlIHRvIHRoZSBjcnlwdG9jdXJyZW5jeS5cbiAgICAgICAgLy8gQnkgZGVmYXVsdCwgd2UnbGwgdXNlIHRoZSBVUyBEb2xsYXIgKFwiVVNEXCIpLlxuICAgICAgICAvLyBUT0RPOiBBbGxvdyB1c2VyIHRvIHNlbGVjdCB0aGVpciBwcmVmZXJyZWQgcXVvdGUgY3VycmVuY3kgaW4gT3B0aW9ucyBtZW51LlxuICAgICAgICBpZiAodGlja2VyLnRpY2tlclR5cGUudmFsdWUgPT09IFwiY3J5cHRvXCIpIHtcbiAgICAgICAgICAgIHMgPSBzICsgYC1VU0RgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmJhc2VVcmx9L3F1b3RlLyR7c31gO1xuICAgIH1cblxuICAgIGdldFRpY2tlcih1cmw6IHN0cmluZywgZG9jdW1lbnQ6IERvY3VtZW50KTogVGlja2VyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUaWNrZXIoXG4gICAgICAgICAgICB0aGlzLmdldFRpY2tlckZyb21QYWdlKGRvY3VtZW50LCB0aGlzLmlzQ3J5cHRvKGRvY3VtZW50KSksXG4gICAgICAgICAgICB0aGlzLmdldE5hbWUoZG9jdW1lbnQpLFxuICAgICAgICAgICAgdGhpcy5nZXRUaWNrZXJUeXBlKHRoaXMsIGRvY3VtZW50LCBkb2N1bWVudClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXRRdW90ZUhlYWRlckluZm9JZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCIjcXVvdGUtaGVhZGVyLWluZm9cIjtcbiAgICB9XG5cbiAgICBnZXROYW1lKGRvY3VtZW50OiBEb2N1bWVudCk6IHN0cmluZyB7XG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5nZXRDb21wYW55SGVhZGVyKGRvY3VtZW50KTtcbiAgICAgICAgbGV0IG5hbWVXaXRoVGlja2VyUmVtb3ZlZCA9IG5hbWUuc3BsaXQoXCIgKFwiKVswXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlRXh0cmFXaGl0ZXNwYWNlKG5hbWVXaXRoVGlja2VyUmVtb3ZlZCk7XG4gICAgfVxuXG4gICAgZ2V0VGlja2VyRnJvbVBhZ2UoZG9jdW1lbnQ6IERvY3VtZW50LCBpc0NyeXB0bzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGxldCBuYW1lID0gdGhpcy5nZXRDb21wYW55SGVhZGVyKGRvY3VtZW50KTtcbiAgICAgICAgbGV0IGNsZWFuZWRVcFN5bWJvbCA9IG5hbWUuc3BsaXQoXCIgKFwiKVsxXTtcbiAgICAgICAgY2xlYW5lZFVwU3ltYm9sID0gY2xlYW5lZFVwU3ltYm9sLnNwbGl0KFwiKVwiKVswXTtcbiAgICAgICAgaWYgKGlzQ3J5cHRvKSB7XG4gICAgICAgICAgICBjbGVhbmVkVXBTeW1ib2wgPSBjbGVhbmVkVXBTeW1ib2wuc3BsaXQoXCItXCIpWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGVhbmVkVXBTeW1ib2w7XG4gICAgfVxuXG4gICAgZ2V0Q29tcGFueUhlYWRlcihkb2N1bWVudDogRG9jdW1lbnQpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuZ2V0UXVvdGVIZWFkZXJJbmZvSWQoKSArIFwiIGgxXCIpXG4gICAgICAgICAgICAudGV4dENvbnRlbnQudHJpbSgpO1xuICAgIH1cblxuICAgIHJlbW92ZUV4dHJhV2hpdGVzcGFjZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoXCJcXFxccytcIik7XG4gICAgICAgIGxldCBzcGxpdCA9IHN0ci5zcGxpdChyZWdleCk7XG4gICAgICAgIGxldCBmdWxsID0gXCJcIjtcbiAgICAgICAgc3BsaXQuZm9yRWFjaChmdW5jdGlvbiAod29yZCkge1xuICAgICAgICAgICAgZnVsbCA9IGZ1bGwgKyB3b3JkLnRyaW0oKSArIFwiIFwiO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gR2V0IHJpZCBvZiB0aGUgb25lIGV4dHJhIHNwYWNlIGF0IHRoZSBlbmQgYmVmb3JlIHdlIHJldHVyblxuICAgICAgICByZXR1cm4gZnVsbC50cmltKCk7XG4gICAgfVxuXG4gICAgaXNDcnlwdG8oZG9jdW1lbnQ6IERvY3VtZW50KTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBxdW90ZUhlYWRlckluZm8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgdGhpcy5nZXRRdW90ZUhlYWRlckluZm9JZCgpICsgXCJcIlxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcXVvdGVIZWFkZXJJbmZvLnRleHRDb250ZW50LmluY2x1ZGVzKFwiQ29pbk1hcmtldENhcFwiKTtcbiAgICB9XG5cbiAgICBpc0V0Zihkb2N1bWVudDogRG9jdW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHF1b3RlU3VtbWFyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcXVvdGUtc3VtbWFyeVwiKTtcbiAgICAgICAgbGV0IHRleHRDbGVhbmVkVXAgPSB0aGlzLnJlbW92ZUV4dHJhV2hpdGVzcGFjZShcbiAgICAgICAgICAgIHF1b3RlU3VtbWFyeS50ZXh0Q29udGVudFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGV4dENsZWFuZWRVcC5pbmNsdWRlcyhcIk5ldCBBc3NldHNcIik7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIm5hbWUiLCJiYXNlVXJsIiwidGhpcyIsImlzIiwiY3JlYXRlVXJsRm9yVGlja2VyIiwidGlja2VyIiwiZ2V0VGlja2VyVHlwZSIsInNpdGUiLCJjcnlwdG9BcmciLCJkb2N1bWVudCIsImlzRXRmIiwiaXNDcnlwdG8iLCJ4Iiwic3ltYm9sIiwidGlja2VyVHlwZSIsInJlbW92ZUV4dHJhV2hpdGVzcGFjZSIsInN0ciIsInJlZ2V4IiwiUmVnRXhwIiwic3BsaXQiLCJmdWxsIiwiZm9yRWFjaCIsIndvcmQiLCJ0cmltIiwidG9TdHJpbmciLCJlcXVhbHMiLCJ0aGF0IiwibmFtZUVxdWFscyIsInRoYXROYW1lIiwidGhpc05hbWUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiVkFMSURfVFlQRVMiLCJpc1ZhbGlkVHlwZSIsIkVycm9yIiwidmFsdWUiLCJ0dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInMiLCJnZXRUaWNrZXIiLCJ1cmwiLCJnZXRUaWNrZXJGcm9tUGFnZSIsImdldE5hbWUiLCJnZXRRdW90ZUhlYWRlckluZm9JZCIsIm5hbWVXaXRoVGlja2VyUmVtb3ZlZCIsImdldENvbXBhbnlIZWFkZXIiLCJjbGVhbmVkVXBTeW1ib2wiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJxdW90ZVN1bW1hcnkiXSwic291cmNlUm9vdCI6IiJ9