(()=>{"use strict";var t,e,r,o,n,i,c={199:(t,e,r)=>{r.d(e,{T:()=>n});var o=r(110),n=function(){function t(t,e){this.EXCEPTION_TICKERS=new Map,this.name=t,this.baseUrl=e}return t.prototype.is=function(){return this.name},t.prototype.createUrlForTicker=function(t){},t.prototype.getTicker=function(t,e){},t.prototype.getTickerType=function(t,e,r){return t.isEtf(r)?new o.C("etf"):t.isCrypto(e)?new o.C("crypto"):new o.C("stock")},t.prototype.getName=function(t){},t.prototype.isCrypto=function(t){},t.prototype.isEtf=function(t){},t.prototype.isNoResultsPage=function(t){},t.prototype.isTickerUrl=function(t){},t}()},219:(t,e,r)=>{r.d(e,{v:()=>n});var o=r(700),n=function(){function t(t,e,r){this.symbol=this.convertHyphenToPeriod(t);var n=new o.c;this.name=n.removeExtraWhitespace(e),this.tickerType=r}return t.prototype.convertHyphenToPeriod=function(t){return t.replace("-",".")},t.prototype.convertPeriodToHyphen=function(t){return t.replace(".","-")},t.prototype.toString=function(){return"Ticker - symbol: ".concat(this.symbol,", name: ").concat(this.name,", type: ").concat(this.tickerType)},t.prototype.equals=function(t){return this.symbol===t.symbol&&this.nameEquals(t.name)&&this.tickerType.equals(t.tickerType)},t.prototype.nameEquals=function(t){var e=this.name.toLowerCase();return t=t.toLowerCase(),e.includes(t)||t.includes(e)},t}()},110:(t,e,r)=>{r.d(e,{C:()=>o});var o=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()},700:(t,e,r)=>{r.d(e,{c:()=>o});var o=function(){function t(){}return t.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),r=t.split(e),o="";return r.forEach((function(t){o=o+t.trim()+" "})),o.trim()},t}()}},p={};function s(t){var e=p[t];if(void 0!==e)return e.exports;var r=p[t]={exports:{}};return c[t](r,r.exports,s),r.exports}s.d=(t,e)=>{for(var r in e)s.o(e,r)&&!s.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),e=s(199),r=s(219),o=s(700),t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)},n=function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function o(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)},i=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},function(t){function e(){var e=t.call(this,"YahooFinance","https://finance.yahoo.com")||this;return e.EXCEPTION_TICKERS.set(["GRT6719","crypto"],["GRT","crypto"]),e}n(e,t),e.prototype.createUrlForTicker=function(t){var e=t.convertPeriodToHyphen(t.symbol);return e=this.checkExceptionList(e,t.tickerType.toString(),!1),"crypto"===t.tickerType.value&&(e+="-USD"),"".concat(this.baseUrl,"/quote/").concat(e)},e.prototype.getTicker=function(t,e){var o=this.getTickerFromPage(e,this.isCrypto(e)),n=this.getTickerType(this,e,e);return new r.v(this.checkExceptionList(o,n.toString(),!0),this.getName(e),n)},e.prototype.checkExceptionList=function(t,e,r){var o,n,c=[t,e],p=this.EXCEPTION_TICKERS.entries();try{for(var s=i(p),u=s.next();!u.done;u=s.next()){var a=u.value,y=void 0,f=void 0;if(r?(y=a[0],f=a[1]):(y=a[1],f=a[0]),c[0]===y[0]&&c[1]===y[1]){t=f[0];break}}}catch(t){o={error:t}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(o)throw o.error}}return t},e.prototype.getHeaderSection=function(){return"section.main section.container div.top"},e.prototype.getName=function(t){var e=this.getCompanyHeader(t).split(" (")[0];return(new o.c).removeExtraWhitespace(e)},e.prototype.getTickerFromPage=function(t,e){var r=this.getCompanyHeader(t).split(" (")[1];return r=r.split(")")[0],e&&(r=r.split("-")[0]),r},e.prototype.getCompanyHeader=function(t){return t.querySelector(this.getHeaderSection()+" h1").textContent.trim()},e.prototype.isCrypto=function(t){return t.querySelector(this.getHeaderSection()).textContent.includes("CoinMarketCap")},e.prototype.isEtf=function(t){var e=t.querySelector("section.main div[data-testid='quote-statistics']");return(new o.c).removeExtraWhitespace(e.textContent).includes("Net Assets")},e.prototype.isNoResultsPage=function(t){return!!t.getElementById("module-error404")},e.prototype.isTickerUrl=function(t){return t.startsWith("https://finance.yahoo.com/quote/")}}(e.T)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,