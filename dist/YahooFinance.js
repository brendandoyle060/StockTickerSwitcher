(()=>{"use strict";var t,e,r,o,n={199:(t,e,r)=>{r.d(e,{T:()=>n});var o=r(110),n=function(){function t(t,e){this.name=t,this.baseUrl=e}return t.prototype.is=function(){return this.name},t.prototype.createUrlForTicker=function(t){},t.prototype.getTickerType=function(t,e,r){return t.isEtf(r)?new o.C("etf"):t.isCrypto(e)?new o.C("crypto"):new o.C("stock")},t.prototype.isCrypto=function(t){},t.prototype.isEtf=function(t){},t.prototype.isNoResultsPage=function(t){},t}()},219:(t,e,r)=>{r.d(e,{v:()=>o});var o=function(){function t(t,e,r){this.symbol=this.convertHyphenInTickerSymbol(t),this.name=this.removeExtraWhitespace(e),this.tickerType=r}return t.prototype.convertHyphenInTickerSymbol=function(t){return t.replace("-",".")},t.prototype.getHyphenatedTickerSymbol=function(){return this.symbol.replace(".","-")},t.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),r=t.split(e),o="";return r.forEach((function(t){o=o+t.trim()+" "})),o.trim()},t.prototype.toString=function(){return"Ticker - symbol: ".concat(this.symbol,", name: ").concat(this.name,", type: ").concat(this.tickerType)},t.prototype.equals=function(t){return this.symbol===t.symbol&&this.nameEquals(t.name)&&this.tickerType.equals(t.tickerType)},t.prototype.nameEquals=function(t){var e=this.name.toLowerCase();return t=t.toLowerCase(),e.includes(t)||t.includes(e)},t}()},110:(t,e,r)=>{r.d(e,{C:()=>o});var o=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()}},i={};function p(t){var e=i[t];if(void 0!==e)return e.exports;var r=i[t]={exports:{}};return n[t](r,r.exports,p),r.exports}p.d=(t,e)=>{for(var r in e)p.o(e,r)&&!p.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},p.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),e=p(199),r=p(219),t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)},o=function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function o(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)},function(t){function e(){return t.call(this,"YahooFinance","https://finance.yahoo.com")||this}o(e,t),e.prototype.createUrlForTicker=function(t){var e=t.getHyphenatedTickerSymbol();return"crypto"===t.tickerType.value&&(e+="-USD"),"".concat(this.baseUrl,"/quote/").concat(e)},e.prototype.getTicker=function(t,e){return new r.v(this.getTickerFromPage(e,this.isCrypto(e)),this.getName(e),this.getTickerType(this,e,e))},e.prototype.getQuoteHeaderInfoId=function(){return"#quote-header-info"},e.prototype.getName=function(t){var e=this.getCompanyHeader(t).split(" (")[0];return this.removeExtraWhitespace(e)},e.prototype.getTickerFromPage=function(t,e){var r=this.getCompanyHeader(t).split(" (")[1];return r=r.split(")")[0],e&&(r=r.split("-")[0]),r},e.prototype.getCompanyHeader=function(t){return t.querySelector(this.getQuoteHeaderInfoId()+" h1").textContent.trim()},e.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),r=t.split(e),o="";return r.forEach((function(t){o=o+t.trim()+" "})),o.trim()},e.prototype.isCrypto=function(t){return t.querySelector(this.getQuoteHeaderInfoId()+"").textContent.includes("CoinMarketCap")},e.prototype.isEtf=function(t){var e=t.querySelector("#quote-summary");return this.removeExtraWhitespace(e.textContent).includes("Net Assets")},e.prototype.isNoResultsPage=function(t){return!!t.getElementById("lookup-page")}}(e.T)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,