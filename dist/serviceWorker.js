(()=>{"use strict";var t={776:(t,e,r)=>{r.d(e,{G:()=>s});var o,n=r(199),i=r(219),c=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=function(t){function e(){return t.call(this,"Robinhood","https://robinhood.com")||this}return c(e,t),e.prototype.createUrlForTicker=function(t){return"crypto"===t.tickerType.value?"".concat(this.baseUrl,"/").concat(t.tickerType.value,"/").concat(t.symbol):"".concat(this.baseUrl,"/stocks/").concat(t.symbol)},e.prototype.getTicker=function(t,e){return new i.v(this.getTickerFromUrl(t),this.getName(e),this.getTickerType(this,t,e))},e.prototype.getTickerFromUrl=function(t){var e=t.split("/"),r=e.length-1,o=e[r];return 0===o.trim().length&&(o=e[r-1]),o},e.prototype.getName=function(t){return t.querySelector("main h1").textContent.trim()},e.prototype.isCrypto=function(t){return t.includes("crypto")},e.prototype.isEtf=function(t){return!(null===t.querySelector("#etf-category"))},e.prototype.isNoResultsPage=function(t){return t.querySelector("html title").textContent.includes("Page not found")},e.prototype.isTickerUrl=function(t){return t.includes("https://robinhood.com")&&(t.includes("stocks")||t.includes("crypto"))},e}(n.T)},199:(t,e,r)=>{r.d(e,{T:()=>n});var o=r(110),n=function(){function t(t,e){this.EXCEPTION_TICKERS=new Map,this.name=t,this.baseUrl=e}return t.prototype.is=function(){return this.name},t.prototype.createUrlForTicker=function(t){},t.prototype.getTicker=function(t,e){},t.prototype.getTickerType=function(t,e,r){return t.isEtf(r)?new o.C("etf"):t.isCrypto(e)?new o.C("crypto"):new o.C("stock")},t.prototype.getName=function(t){},t.prototype.isCrypto=function(t){},t.prototype.isEtf=function(t){},t.prototype.isNoResultsPage=function(t){},t.prototype.isTickerUrl=function(t){},t}()},455:(t,e,r)=>{r.d(e,{k:()=>u});var o,n=r(199),i=r(219),c=r(700),s=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(t){function e(){var e=t.call(this,"YahooFinance","https://finance.yahoo.com")||this;return e.EXCEPTION_TICKERS.set(["GRT6719","crypto"],["GRT","crypto"]),e}return s(e,t),e.prototype.createUrlForTicker=function(t){var e=t.convertPeriodToHyphen(t.symbol);return e=this.checkExceptionList(e,t.tickerType.toString(),!1),"crypto"===t.tickerType.value&&(e+="-USD"),"".concat(this.baseUrl,"/quote/").concat(e)},e.prototype.getTicker=function(t,e){var r=this.getTickerFromPage(e,this.isCrypto(e)),o=this.getTickerType(this,e,e);return new i.v(this.checkExceptionList(r,o.toString(),!0),this.getName(e),o)},e.prototype.checkExceptionList=function(t,e,r){var o,n,i=[t,e],c=this.EXCEPTION_TICKERS.entries();try{for(var s=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(c),u=s.next();!u.done;u=s.next()){var a=u.value,p=void 0,l=void 0;if(r?(p=a[0],l=a[1]):(p=a[1],l=a[0]),i[0]===p[0]&&i[1]===p[1]){t=l[0];break}}}catch(t){o={error:t}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(o)throw o.error}}return t},e.prototype.getHeaderSection=function(){return"section.main section.container div.top"},e.prototype.getName=function(t){var e=this.getCompanyHeader(t).split(" (")[0];return(new c.c).removeExtraWhitespace(e)},e.prototype.getTickerFromPage=function(t,e){var r=this.getCompanyHeader(t).split(" (")[1];return r=r.split(")")[0],e&&(r=r.split("-")[0]),r},e.prototype.getCompanyHeader=function(t){return t.querySelector(this.getHeaderSection()+" h1").textContent.trim()},e.prototype.isCrypto=function(t){return t.querySelector(this.getHeaderSection()).textContent.includes("CoinMarketCap")},e.prototype.isEtf=function(t){var e=t.querySelector("section.main div[data-testid='quote-statistics']");return(new c.c).removeExtraWhitespace(e.textContent).includes("Net Assets")},e.prototype.isNoResultsPage=function(t){return!!t.getElementById("module-error404")},e.prototype.isTickerUrl=function(t){return t.startsWith("https://finance.yahoo.com/quote/")},e}(n.T)},219:(t,e,r)=>{r.d(e,{v:()=>n});var o=r(700),n=function(){function t(t,e,r){this.symbol=this.convertHyphenToPeriod(t);var n=new o.c;this.name=n.removeExtraWhitespace(e),this.tickerType=r}return t.prototype.convertHyphenToPeriod=function(t){return t.replace("-",".")},t.prototype.convertPeriodToHyphen=function(t){return t.replace(".","-")},t.prototype.toString=function(){return"Ticker - symbol: ".concat(this.symbol,", name: ").concat(this.name,", type: ").concat(this.tickerType)},t.prototype.equals=function(t){return this.symbol===t.symbol&&this.nameEquals(t.name)&&this.tickerType.equals(t.tickerType)},t.prototype.nameEquals=function(t){var e=this.name.toLowerCase();return t=t.toLowerCase(),e.includes(t)||t.includes(e)},t}()},110:(t,e,r)=>{r.d(e,{C:()=>o});var o=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()},700:(t,e,r)=>{r.d(e,{c:()=>o});var o=function(){function t(){}return t.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),r=t.split(e),o="";return r.forEach((function(t){o=o+t.trim()+" "})),o.trim()},t}()}},e={};function r(o){var n=e[o];if(void 0!==n)return n.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,r),i.exports}r.d=(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=r(455),e=r(110),o=r(219),n=r(776);function i(e){return console.log("determineSite(site): "+e),(e=e.toLowerCase()).includes("robinhood")?new n.G:new t.k}chrome.action.onClicked.addListener((function(t){chrome.tabs.query({active:!0,lastFocusedWindow:!0},(function(e){var r=e[0],o=r.index;chrome.tabs.sendMessage(r.id,{message:"clicked_browser_action",url:t.url,index:o+1})}))})),chrome.runtime.onMessage.addListener((function(t,r,n){if("open_new_tab"===t.message){var c=i(t.toSite),s=new o.v(t.tickerSymbol,t.tickerName,new e.C(t.tickerType));console.log("serviceWorker ticker: "+s.toString());var u=c.createUrlForTicker(s);chrome.tabs.create({url:u,index:t.index})}})),chrome.runtime.onMessage.addListener((function(t,e,r){if("open_homepage"===t.message){var o=i(t.toSite).baseUrl;console.log("serviceWorker open_homepage url: "+o),chrome.tabs.create({url:o,index:t.index})}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,