(()=>{"use strict";var t,e={776:(t,e,r)=>{r.d(e,{G:()=>u});var o,n=r(199),i=r(110),c=r(219),s=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(t){function e(){return t.call(this,"Robinhood","https://robinhood.com")||this}return s(e,t),e.prototype.createUrlForTicker=function(t){return"".concat(this.baseUrl,"/").concat(t.tickerType.value,"/").concat(t.symbol,"/")},e.prototype.getTicker=function(t,e){var r=e.querySelector("title").textContent.split(" ")[0];return new c.v(r,this.getName(e),this.getTickerType(t,e))},e.prototype.getTickerType=function(t,e){return this.isEtf(e)?new i.C("etf"):this.isCrypto(t)?new i.C("crypto"):new i.C("stock")},e.prototype.getName=function(t){return t.querySelector("main header h1").textContent.trim()},e.prototype.isCrypto=function(t){return t.includes("crypto")},e.prototype.isEtf=function(t){return!(null===t.querySelector("#etf-category"))},e}(n.T)},199:(t,e,r)=>{r.d(e,{T:()=>o});var o=function(t,e){this.name=t,this.baseUrl=e}},219:(t,e,r)=>{r.d(e,{v:()=>o});var o=function(){function t(t,e,r){this.symbol=t,this.name=e,this.tickerType=r}return t.prototype.toString=function(){return"Ticker - symbol: ".concat(this.symbol,", name: ").concat(this.name,", type: ").concat(this.tickerType)},t}()},110:(t,e,r)=>{r.d(e,{C:()=>o});var o=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){var e=t.toLowerCase().trim();return!!this.VALID_TYPES.includes(e)},t.prototype.toString=function(){return this.value},t}()}},r={};function o(t){var n=r[t];if(void 0!==n)return n.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,o),i.exports}o.d=(t,e)=>{for(var r in e)o.o(e,r)&&!o.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=o(776),chrome.runtime.onMessage.addListener((function(e,r,o){if("clicked_browser_action"===e.message){var n=(new t.G).getTicker(e.url,document);console.log(n.toString()),chrome.runtime.sendMessage({message:"open_new_tab",tickerSymbol:n.symbol,tickerName:n.name,tickerType:n.tickerType+"",index:e.index})}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,