(()=>{"use strict";var t,e,r={776:(t,e,r)=>{r.d(e,{G:()=>s});var o,n=r(199),i=r(219),c=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),s=function(t){function e(){return t.call(this,"Robinhood","https://robinhood.com")||this}return c(e,t),e.prototype.createUrlForTicker=function(t){return"crypto"===t.tickerType.value?"".concat(this.baseUrl,"/").concat(t.tickerType.value,"/").concat(t.symbol):"".concat(this.baseUrl,"/stocks/").concat(t.symbol)},e.prototype.getTicker=function(t,e){return new i.v(this.getTickerFromUrl(t),this.getName(e),this.getTickerType(this,t,e))},e.prototype.getTickerFromUrl=function(t){var e=t.split("/"),r=e.length-1,o=e[r];return 0===o.trim().length&&(o=e[r-1]),o},e.prototype.getName=function(t){return t.querySelector("main h1").textContent.trim()},e.prototype.isCrypto=function(t){return t.includes("crypto")},e.prototype.isEtf=function(t){return!(null===t.querySelector("#etf-category"))},e.prototype.isNoResultsPage=function(t){return t.querySelector("html title").textContent.includes("Page not found")},e.prototype.isTickerUrl=function(t){return t.startsWith("https://robinhood.com/stocks/")||t.startsWith("https://robinhood.com/crypto/")},e}(n.T)},199:(t,e,r)=>{r.d(e,{T:()=>n});var o=r(110),n=function(){function t(t,e){this.EXCEPTION_TICKERS=new Map,this.name=t,this.baseUrl=e}return t.prototype.is=function(){return this.name},t.prototype.createUrlForTicker=function(t){},t.prototype.getTicker=function(t,e){},t.prototype.getTickerType=function(t,e,r){return t.isEtf(r)?new o.C("etf"):t.isCrypto(e)?new o.C("crypto"):new o.C("stock")},t.prototype.getName=function(t){},t.prototype.isCrypto=function(t){},t.prototype.isEtf=function(t){},t.prototype.isNoResultsPage=function(t){},t.prototype.isTickerUrl=function(t){},t}()},455:(t,e,r)=>{r.d(e,{k:()=>u});var o,n=r(199),i=r(219),c=r(700),s=(o=function(t,e){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},o(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),u=function(t){function e(){var e=t.call(this,"YahooFinance","https://finance.yahoo.com")||this;return e.EXCEPTION_TICKERS.set(["GRT6719","crypto"],["GRT","crypto"]),e}return s(e,t),e.prototype.createUrlForTicker=function(t){var e=t.convertPeriodToHyphen(t.symbol);return e=this.checkExceptionList(e,t.tickerType.toString(),!1),"crypto"===t.tickerType.value&&(e+="-USD"),"".concat(this.baseUrl,"/quote/").concat(e)},e.prototype.getTicker=function(t,e){var r=this.getTickerFromPage(e,this.isCrypto(e)),o=this.getTickerType(this,e,e);return new i.v(this.checkExceptionList(r,o.toString(),!0),this.getName(e),o)},e.prototype.checkExceptionList=function(t,e,r){var o,n,i=[t,e],c=this.EXCEPTION_TICKERS.entries();try{for(var s=function(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],o=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(c),u=s.next();!u.done;u=s.next()){var p=u.value,a=void 0,y=void 0;if(r?(a=p[0],y=p[1]):(a=p[1],y=p[0]),i[0]===a[0]&&i[1]===a[1]){t=y[0];break}}}catch(t){o={error:t}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(o)throw o.error}}return t},e.prototype.getQuoteHeaderInfoId=function(){return"#quote-header-info"},e.prototype.getName=function(t){var e=this.getCompanyHeader(t).split(" (")[0];return(new c.c).removeExtraWhitespace(e)},e.prototype.getTickerFromPage=function(t,e){var r=this.getCompanyHeader(t).split(" (")[1];return r=r.split(")")[0],e&&(r=r.split("-")[0]),r},e.prototype.getCompanyHeader=function(t){return t.querySelector(this.getQuoteHeaderInfoId()+" h1").textContent.trim()},e.prototype.isCrypto=function(t){return t.querySelector(this.getQuoteHeaderInfoId()).textContent.includes("CoinMarketCap")},e.prototype.isEtf=function(t){var e=t.querySelector("#quote-summary");return(new c.c).removeExtraWhitespace(e.textContent).includes("Net Assets")},e.prototype.isNoResultsPage=function(t){return!!t.getElementById("lookup-page")},e.prototype.isTickerUrl=function(t){return t.startsWith("https://finance.yahoo.com/quote/")},e}(n.T)},219:(t,e,r)=>{r.d(e,{v:()=>n});var o=r(700),n=function(){function t(t,e,r){this.symbol=this.convertHyphenToPeriod(t);var n=new o.c;this.name=n.removeExtraWhitespace(e),this.tickerType=r}return t.prototype.convertHyphenToPeriod=function(t){return t.replace("-",".")},t.prototype.convertPeriodToHyphen=function(t){return t.replace(".","-")},t.prototype.toString=function(){return"Ticker - symbol: ".concat(this.symbol,", name: ").concat(this.name,", type: ").concat(this.tickerType)},t.prototype.equals=function(t){return this.symbol===t.symbol&&this.nameEquals(t.name)&&this.tickerType.equals(t.tickerType)},t.prototype.nameEquals=function(t){var e=this.name.toLowerCase();return t=t.toLowerCase(),e.includes(t)||t.includes(e)},t}()},110:(t,e,r)=>{r.d(e,{C:()=>o});var o=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()},700:(t,e,r)=>{r.d(e,{c:()=>o});var o=function(){function t(){}return t.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),r=t.split(e),o="";return r.forEach((function(t){o=o+t.trim()+" "})),o.trim()},t}()}},o={};function n(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={exports:{}};return r[t](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t=n(776),e=n(455),chrome.runtime.onMessage.addListener((function(r,o,n){if("clicked_browser_action"===r.message){var i=void 0,c=void 0;if(r.url.toLowerCase().includes("robinhood")?(i=new t.G,c=new e.k):(i=new e.k,c=new t.G),i.isTickerUrl(r.url)){var s=i.getTicker(r.url,document);console.log(s.toString()),chrome.runtime.sendMessage({message:"open_new_tab",tickerSymbol:s.symbol,tickerName:s.name,tickerType:s.tickerType+"",index:r.index,fromSite:i.is(),toSite:c.is()})}else chrome.runtime.sendMessage({message:"open_homepage",index:r.index,fromSite:i.is(),toSite:c.is()})}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFSSxZQUFZLEVBQU1DLElBQUtOLEVBQVdDLElBRTFFLEVDTkRULEVBQW9CVSxFQUFJLENBQUNLLEVBQUtDLElBQVVMLE9BQU9NLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEcsa0JDSzlFSSxPQUFPQyxRQUFRQyxVQUFVQyxhQUFZLFNBQ2pDQyxFQUNBQyxFQUNBQyxHQUVBLEdBQXdCLDJCQUFwQkYsRUFBUUcsUUFBc0MsQ0FDOUMsSUFBSUMsT0FBUSxFQUNSQyxPQUFNLEVBVVYsR0FSSUwsRUFBUTVGLElBQUl3RCxjQUFjM0MsU0FBUyxjQUNuQ21GLEVBQVcsSUFBSSxJQUNmQyxFQUFTLElBQUksTUFFYkQsRUFBVyxJQUFJLElBQ2ZDLEVBQVMsSUFBSSxLQUdiRCxFQUFTaEYsWUFBWTRFLEVBQVE1RixLQUFNLENBQ25DLElBQUlQLEVBQWlCdUcsRUFBU2pHLFVBQVU2RixFQUFRNUYsSUFBS0MsVUFDckRpRyxRQUFRQyxJQUFJMUcsRUFBT29DLFlBRW5CMkQsT0FBT0MsUUFBUVcsWUFBWSxDQUN2QkwsUUFBUyxlQUNUTSxhQUFjNUcsRUFBT0ssT0FDckJ3RyxXQUFZN0csRUFBT3lCLEtBQ25CeEIsV0FBWUQsRUFBT0MsV0FBYSxHQUNoQzZHLE1BQU9YLEVBQVFXLE1BQ2ZQLFNBQVVBLEVBQVMzRSxLQUNuQjRFLE9BQVFBLEVBQU81RSxNLE1BR25CbUUsT0FBT0MsUUFBUVcsWUFBWSxDQUN2QkwsUUFBUyxnQkFDVFEsTUFBT1gsRUFBUVcsTUFDZlAsU0FBVUEsRUFBUzNFLEtBQ25CNEUsT0FBUUEsRUFBTzVFLE0sQ0FJL0IsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3JvYmluaG9vZHRveWFob29maW5hbmNlLy4vc3JjL3NpdGVzL1JvYmluaG9vZC50cyIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS8uL3NyYy9zaXRlcy9TaXRlLnRzIiwid2VicGFjazovL3JvYmluaG9vZHRveWFob29maW5hbmNlLy4vc3JjL3NpdGVzL1lhaG9vRmluYW5jZS50cyIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS8uL3NyYy90aWNrZXJzL1RpY2tlci50cyIsIndlYnBhY2s6Ly9yb2Jpbmhvb2R0b3lhaG9vZmluYW5jZS8uL3NyYy90aWNrZXJzL1RpY2tlclR5cGUudHMiLCJ3ZWJwYWNrOi8vcm9iaW5ob29kdG95YWhvb2ZpbmFuY2UvLi9zcmMvdXRpbHMvVXRpbHMudHMiLCJ3ZWJwYWNrOi8vcm9iaW5ob29kdG95YWhvb2ZpbmFuY2Uvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcm9iaW5ob29kdG95YWhvb2ZpbmFuY2Uvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JvYmluaG9vZHRveWFob29maW5hbmNlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcm9iaW5ob29kdG95YWhvb2ZpbmFuY2UvLi9zcmMvY29udGVudFNjcmlwdHMvY29udGVudFNjcmlwdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaXRlIH0gZnJvbSBcIi4vU2l0ZVwiO1xuaW1wb3J0IHsgVGlja2VyVHlwZSB9IGZyb20gXCIuLi90aWNrZXJzL1RpY2tlclR5cGVcIjtcbmltcG9ydCB7IFRpY2tlciB9IGZyb20gXCIuLi90aWNrZXJzL1RpY2tlclwiO1xuXG5leHBvcnQgY2xhc3MgUm9iaW5ob29kIGV4dGVuZHMgU2l0ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiUm9iaW5ob29kXCIsIGBodHRwczovL3JvYmluaG9vZC5jb21gKTtcbiAgICB9XG5cbiAgICBjcmVhdGVVcmxGb3JUaWNrZXIodGlja2VyOiBUaWNrZXIpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGlja2VyLnRpY2tlclR5cGUudmFsdWUgPT09IFwiY3J5cHRvXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLmJhc2VVcmx9LyR7dGlja2VyLnRpY2tlclR5cGUudmFsdWV9LyR7dGlja2VyLnN5bWJvbH1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRVRGcyBhbHNvIGdldCB0aGUgJ3N0b2NrcycgcGF0aCBpbiB0aGUgdXJsIG9uIFJIXG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5iYXNlVXJsfS9zdG9ja3MvJHt0aWNrZXIuc3ltYm9sfWA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRUaWNrZXIodXJsOiBzdHJpbmcsIGRvY3VtZW50OiBEb2N1bWVudCk6IFRpY2tlciB7XG4gICAgICAgIHJldHVybiBuZXcgVGlja2VyKFxuICAgICAgICAgICAgdGhpcy5nZXRUaWNrZXJGcm9tVXJsKHVybCksXG4gICAgICAgICAgICB0aGlzLmdldE5hbWUoZG9jdW1lbnQpLFxuICAgICAgICAgICAgdGhpcy5nZXRUaWNrZXJUeXBlKHRoaXMsIHVybCwgZG9jdW1lbnQpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHVybCAtIHRoaXMgcGFnZSdzIHVybFxuICAgICAqIEByZXR1cm5zIGp1c3QgdGhlIHRpY2tlciBzZWN0aW9uIG9mIHRoZSBnaXZlbiB1cmxcbiAgICAgKi9cbiAgICBnZXRUaWNrZXJGcm9tVXJsKHVybDogc3RyaW5nKSB7XG4gICAgICAgIGxldCBzcGxpdEFycmF5ID0gdXJsLnNwbGl0KFwiL1wiKTtcblxuICAgICAgICBsZXQgbGFzdEluZGV4ID0gc3BsaXRBcnJheS5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgdGlja2VyID0gc3BsaXRBcnJheVtsYXN0SW5kZXhdO1xuICAgICAgICBpZiAodGlja2VyLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRpY2tlciA9IHNwbGl0QXJyYXlbbGFzdEluZGV4IC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGlja2VyO1xuICAgIH1cblxuICAgIGdldE5hbWUoZG9jdW1lbnQ6IERvY3VtZW50KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluIGgxXCIpLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICB9XG5cbiAgICBpc0NyeXB0byh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdXJsLmluY2x1ZGVzKFwiY3J5cHRvXCIpO1xuICAgIH1cblxuICAgIGlzRXRmKGRvY3VtZW50OiBEb2N1bWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgZXRmQ2F0ZWdvcnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2V0Zi1jYXRlZ29yeVwiKTtcbiAgICAgICAgcmV0dXJuICEoZXRmQ2F0ZWdvcnkgPT09IG51bGwpO1xuICAgIH1cblxuICAgIGlzTm9SZXN1bHRzUGFnZShkb2N1bWVudDogRG9jdW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcImh0bWwgdGl0bGVcIilcbiAgICAgICAgICAgIC50ZXh0Q29udGVudC5pbmNsdWRlcyhcIlBhZ2Ugbm90IGZvdW5kXCIpO1xuICAgIH1cblxuICAgIGlzVGlja2VyVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB1cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vcm9iaW5ob29kLmNvbS9zdG9ja3MvXCIpIHx8XG4gICAgICAgICAgICB1cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vcm9iaW5ob29kLmNvbS9jcnlwdG8vXCIpXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVGlja2VyIH0gZnJvbSBcIi4uL3RpY2tlcnMvVGlja2VyXCI7XG5pbXBvcnQgeyBUaWNrZXJUeXBlIH0gZnJvbSBcIi4uL3RpY2tlcnMvVGlja2VyVHlwZVwiO1xuXG4vKipcbiAqIFBhcmVudCBjbGFzcyBmb3Igb2JqZWN0cyBob2xkaW5nIGluZm9ybWF0aW9uXG4gKiBhYm91dCBhIHBhcnRpY3VsYXIgd2Vic2l0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNpdGUge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBiYXNlVXJsOiBzdHJpbmc7XG4gICAgRVhDRVBUSU9OX1RJQ0tFUlM6IE1hcDxhbnksIGFueT4gPSBuZXcgTWFwKCk7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGJhc2VVcmw6IHN0cmluZykge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBuYW1lIG9mIHRoZSBzaXRlXG4gICAgICovXG4gICAgaXMoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIFRpY2tlciwgY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSB1cmwgZm9yIHRoYXQgVGlja2VyXG4gICAgICogb24gdGhpcyBTaXRlLlxuICAgICAqIEBwYXJhbSB0aWNrZXIgLSB0aGUgVGlja2VyIGZvciB3aGljaCB3ZSdyZSBjcmVhdGluZyBhIHVybFxuICAgICAqL1xuICAgIGNyZWF0ZVVybEZvclRpY2tlcih0aWNrZXI6IFRpY2tlcik6IGFueSB7fVxuXG4gICAgLyoqXG4gICAgICogUHVsbCBhbGwgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIGZyb20gdGhlIGN1cnJlbnQgdXJsXG4gICAgICogYW5kIHBhZ2UgdG8gY3JlYXRlIGEgVGlja2VyIG9iamVjdCB0byBzZW5kIHRvIG90aGVyIFNpdGVzXG4gICAgICogQHBhcmFtIHVybCAtIHVybCBvZiB0aGUgY3VycmVudCBwYWdlXG4gICAgICogQHBhcmFtIGRvY3VtZW50IC0gRE9NIG9mIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgKi9cbiAgICBnZXRUaWNrZXIodXJsOiBzdHJpbmcsIGRvY3VtZW50OiBEb2N1bWVudCk6IGFueSB7fVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHRoZSB0eXBlIG9mIHRpY2tlciBmb3IgdGhlIGN1cnJlbnQgcGFnZVxuICAgICAqIChzdG9jaywgY3J5cHRvLCBldGMpXG4gICAgICogQHBhcmFtIHNpdGUgLSB0aGUgU2l0ZSB3aGljaCB0aGUgdXNlciBpcyBjdXJyZW50bHkgb25cbiAgICAgKiBAcGFyYW0gY3J5cHRvQXJnIC0gc29tZSBzaXRlcyBtYXkgbmVlZCBhIHNlcGFyYXRlIHdheSB0byBpZGVudGlmeSB3aGV0aGVyIG9yIG5vdCB0aGUgcGFnZSBpcyBhIGNyeXB0byBwYWdlIChzdWNoIGFzIHRoZSB1cmwpLlxuICAgICAqIElmIHRoYXQncyB0aGUgY2FzZSwgdGhhdCBhcmcgZ29lcyBoZXJlLiBPdGhlcndpc2UsIHRoZSBEb2N1bWVudCBwYXJhbSBpcyB1c3VhbGx5IHNlbnQgdHdpY2UuXG4gICAgICogQHBhcmFtIGRvY3VtZW50IC0gdGhlIERPTSBvZiB0aGUgY3VycmVudCBwYWdlLCBhcyBhIERvY3VtZW50IG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyBUaWNrZXJUeXBlIG9mIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgKi9cbiAgICBnZXRUaWNrZXJUeXBlKHNpdGU6IFNpdGUsIGNyeXB0b0FyZzogYW55LCBkb2N1bWVudDogRG9jdW1lbnQpOiBUaWNrZXJUeXBlIHtcbiAgICAgICAgaWYgKHNpdGUuaXNFdGYoZG9jdW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpY2tlclR5cGUoXCJldGZcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoc2l0ZS5pc0NyeXB0byhjcnlwdG9BcmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpY2tlclR5cGUoXCJjcnlwdG9cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRpY2tlclR5cGUoXCJzdG9ja1wiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiB0eXBlIGZvciB0aGUgbWV0aG9kcyBiZWxvdyBpcyBcImFueVwiLCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGEgdmFsdWUgaW4gdGhlIHN1cGVyY2xhc3MsIHdoaWNoIHdlIHdvdWxkIGhhdmUgdG8gc2luY2Ugd2UncmUgdXNpbmcgdGhlbSBpbiBnZXRUaWNrZXJUeXBlIGFib3ZlLlxuICAgIC8vIEltcGxlbWVudGF0aW9ucyBvZiB0aGVzZSBtZXRob2RzIGluIHN1YmNsYXNzZXMgc2hvdWxkIHJldHVybiBhIGJvb2xlYW4uXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbXBhbnkncyBmdWxsIG5hbWVcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnQgLSBET00gY29udGVudCBvZiB0aGUgY3VycmVudCBwYWdlXG4gICAgICovXG4gICAgZ2V0TmFtZShkb2N1bWVudDogRG9jdW1lbnQpOiBhbnkge31cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBwYWdlIGlzIGZvciBhIGNyeXB0b2N1cnJlbmN5LFxuICAgICAqIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAcGFyYW0geCAtIGFyZyBvZiBhbnkgdHlwZSB3aGljaCB3aWxsIGhlbHAgYSBwYXJ0aXVsYXIgc2l0ZVxuICAgICAqIGlkZW50aWZ5IGEgY3J5cHRvY3VycmVuY3kgcGFnZS5cbiAgICAgKi9cbiAgICBpc0NyeXB0byh4OiBhbnkpOiBhbnkge31cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBwYWdlIGlzIGZvciBhbiBFVEYsXG4gICAgICogZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCAtIERPTSBvZiB0aGUgY3VycmVudCBwYWdlLlxuICAgICAqL1xuICAgIGlzRXRmKGRvY3VtZW50OiBEb2N1bWVudCk6IGFueSB7fVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IHBhZ2UgaXMgYSBObyBSZXN1bHRzIHBhZ2UsXG4gICAgICogZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCAtIERPTSBvZiB0aGUgY3VycmVudCBwYWdlLlxuICAgICAqL1xuICAgIGlzTm9SZXN1bHRzUGFnZShkb2N1bWVudDogRG9jdW1lbnQpOiBhbnkge31cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB1cmwgLSB0aGUgY3VycmVudCBwYWdlJ3MgdXJsXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdXJsIGluZGljYXRlcyB0aGF0IHRoZSBwYWdlIGlzIGZvciBvbmUgc3BlY2lmaWMgVGlja2VyLFxuICAgICAqIGZhbHNlIGlmIGl0J3MgYW55IG90aGVyIGtpbmQgb2YgcGFnZS5cbiAgICAgKi9cbiAgICBpc1RpY2tlclVybCh1cmw6IHN0cmluZyk6IGFueSB7fVxufVxuIiwiaW1wb3J0IHsgU2l0ZSB9IGZyb20gXCIuL1NpdGVcIjtcbmltcG9ydCB7IFRpY2tlclR5cGUgfSBmcm9tIFwiLi4vdGlja2Vycy9UaWNrZXJUeXBlXCI7XG5pbXBvcnQgeyBUaWNrZXIgfSBmcm9tIFwiLi4vdGlja2Vycy9UaWNrZXJcIjtcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL1V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBZYWhvb0ZpbmFuY2UgZXh0ZW5kcyBTaXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoXCJZYWhvb0ZpbmFuY2VcIiwgYGh0dHBzOi8vZmluYW5jZS55YWhvby5jb21gKTtcblxuICAgICAgICB0aGlzLkVYQ0VQVElPTl9USUNLRVJTLnNldChbXCJHUlQ2NzE5XCIsIFwiY3J5cHRvXCJdLCBbXCJHUlRcIiwgXCJjcnlwdG9cIl0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVVybEZvclRpY2tlcih0aWNrZXI6IFRpY2tlcik6IHN0cmluZyB7XG4gICAgICAgIGxldCBzOiBzdHJpbmcgPSB0aWNrZXIuY29udmVydFBlcmlvZFRvSHlwaGVuKHRpY2tlci5zeW1ib2wpO1xuXG4gICAgICAgIHMgPSB0aGlzLmNoZWNrRXhjZXB0aW9uTGlzdChzLCB0aWNrZXIudGlja2VyVHlwZS50b1N0cmluZygpLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gSWYgdGhlIHBhZ2UgdGhhdCB3ZSdyZSBvbiBpcyBmb3IgYSBzdG9jayBvciBFVEYsIHRoZW4gd2UgY2FuIGp1c3QgbGVhdmUgdGhlIHRpY2tlciBhcy1pcy5cbiAgICAgICAgLy8gSWYgdGhlIHBhZ2UgdGhhdCB3ZSdyZSBvbiBpcyBmb3IgYSBjcnlwdG9jdXJyZW5jeSwgdGhlbiB3ZSBuZWVkXG4gICAgICAgIC8vIHRvIGFkanVzdCB0aGUgdGlja2VyIHRvIGFkZCB0aGUgXCJxdW90ZSBjdXJyZW5jeVwiIC0tXG4gICAgICAgIC8vIHRoZSBjdXJyZW5jeSBmb3Igd2hpY2ggd2UncmUgZGlzcGxheWluZyB0aGUgZXhjaGFuZ2UgcmF0ZSB0byB0aGUgY3J5cHRvY3VycmVuY3kuXG4gICAgICAgIC8vIEJ5IGRlZmF1bHQsIHdlJ2xsIHVzZSB0aGUgVVMgRG9sbGFyIChcIlVTRFwiKS5cbiAgICAgICAgLy8gVE9ETzogQWxsb3cgdXNlciB0byBzZWxlY3QgdGhlaXIgcHJlZmVycmVkIHF1b3RlIGN1cnJlbmN5IGluIE9wdGlvbnMgbWVudS5cbiAgICAgICAgaWYgKHRpY2tlci50aWNrZXJUeXBlLnZhbHVlID09PSBcImNyeXB0b1wiKSB7XG4gICAgICAgICAgICBzID0gcyArIGAtVVNEYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7dGhpcy5iYXNlVXJsfS9xdW90ZS8ke3N9YDtcbiAgICB9XG5cbiAgICBnZXRUaWNrZXIodXJsOiBzdHJpbmcsIGRvY3VtZW50OiBEb2N1bWVudCk6IFRpY2tlciB7XG4gICAgICAgIGxldCB0aWNrZXJTdHJpbmc6IHN0cmluZyA9IHRoaXMuZ2V0VGlja2VyRnJvbVBhZ2UoXG4gICAgICAgICAgICBkb2N1bWVudCxcbiAgICAgICAgICAgIHRoaXMuaXNDcnlwdG8oZG9jdW1lbnQpXG4gICAgICAgICk7XG4gICAgICAgIGxldCB0aWNrZXJUeXBlOiBUaWNrZXJUeXBlID0gdGhpcy5nZXRUaWNrZXJUeXBlKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGRvY3VtZW50LFxuICAgICAgICAgICAgZG9jdW1lbnRcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gbmV3IFRpY2tlcihcbiAgICAgICAgICAgIHRoaXMuY2hlY2tFeGNlcHRpb25MaXN0KHRpY2tlclN0cmluZywgdGlja2VyVHlwZS50b1N0cmluZygpLCB0cnVlKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0TmFtZShkb2N1bWVudCksXG4gICAgICAgICAgICB0aWNrZXJUeXBlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlcmUgYXJlIGEgZmV3IG91dGxpZXIgc2VjdXJpdGllcyB3aGljaCBkbyBub3QgYWJpZGUgYnkgdGhlIHVybCBjcmVhdGlvblxuICAgICAqIHJ1bGVzIHdoaWNoIGFyZSBub3JtYWxseSB1c2VkIG9uIGNlcnRhaW4gc2l0ZXMuIFRvIGhhbmRsZSB0aGVzZSBjYXNlcywgd2UgbmVlZCB0b1xuICAgICAqIGNoZWNrIHRvIHNlZSBpZiBvdXIgdGlja2VyIGZhbGxzIGludG8gdGhpcyBzbWFsbCBzZXQgb2YgZXhjZXB0aW9ucyxcbiAgICAgKiBhbmQgaWYgc28sIHRvIGNvbnZlcnQgaXQgdG8gdGhlIGNvcnJlY3QgdGlja2VyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRpY2tlclN0ciAtIHRoZSB0aWNrZXIgd2hpY2ggd2UncmUgY2hlY2tpbmcgdG8gc2VlIGlmIGl0J3Mgb24gdGhlIGV4Y2VwdGlvbiBsaXN0XG4gICAgICogQHBhcmFtIHR0U3RyIC0gdGhlIHRpY2tlciB0eXBlIG9mIHRoZSBnaXZlbiB0aWNrZXJcbiAgICAgKiBAcGFyYW0gaXNPdXRnb2luZyAtIHRydWUgaWYgd2UncmUgY29udmVydGluZyB0aGUgdGlja2VyIHRvXG4gICAgICogdXNlIGl0IGZvciBhIGRpZmZlcmVudCBzaXRlLCBmYWxzZSBpZiB0aGlzIGlzIGFuIGluY29taW5nIHRpY2tlclxuICAgICAqIHdoaWNoIHdlJ3JlIGNvbnZlcnRpbmcgZm9yIHVzZSBvbiAqdGhpcyogc2l0ZS5cbiAgICAgKiBAcmV0dXJucyB0aGUgY29ycmVjdCB0aWNrZXIgc3RyaW5nLCB3aGV0aGVyIGl0IG5lZWRlZCB0byBiZSBhZGp1c3RlZCBvciBub3QuXG4gICAgICovXG4gICAgY2hlY2tFeGNlcHRpb25MaXN0KFxuICAgICAgICB0aWNrZXJTdHI6IHN0cmluZyxcbiAgICAgICAgdHRTdHI6IHN0cmluZyxcbiAgICAgICAgaXNPdXRnb2luZzogYm9vbGVhblxuICAgICk6IHN0cmluZyB7XG4gICAgICAgIGxldCBhcmdBcnJheSA9IFt0aWNrZXJTdHIsIHR0U3RyXTtcbiAgICAgICAgbGV0IGV4Y2VwdGlvbkl0ZXJhdG9yID0gdGhpcy5FWENFUFRJT05fVElDS0VSUy5lbnRyaWVzKCk7XG4gICAgICAgIGZvciAobGV0IHBhaXIgb2YgZXhjZXB0aW9uSXRlcmF0b3IpIHtcbiAgICAgICAgICAgIGxldCBrZXlBcnJheTtcbiAgICAgICAgICAgIGxldCB2YWxBcnJheTtcbiAgICAgICAgICAgIGlmIChpc091dGdvaW5nKSB7XG4gICAgICAgICAgICAgICAga2V5QXJyYXkgPSBwYWlyWzBdO1xuICAgICAgICAgICAgICAgIHZhbEFycmF5ID0gcGFpclsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5QXJyYXkgPSBwYWlyWzFdO1xuICAgICAgICAgICAgICAgIHZhbEFycmF5ID0gcGFpclswXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFyZ0FycmF5WzBdID09PSBrZXlBcnJheVswXSAmJiBhcmdBcnJheVsxXSA9PT0ga2V5QXJyYXlbMV0pIHtcbiAgICAgICAgICAgICAgICB0aWNrZXJTdHIgPSB2YWxBcnJheVswXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aWNrZXJTdHI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgaWQgZm9yIHRoZSBxdW90ZSBoZWFkZXIgZWxlbWVudFxuICAgICAqL1xuICAgIGdldFF1b3RlSGVhZGVySW5mb0lkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIiNxdW90ZS1oZWFkZXItaW5mb1wiO1xuICAgIH1cblxuICAgIGdldE5hbWUoZG9jdW1lbnQ6IERvY3VtZW50KTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG5hbWUgPSB0aGlzLmdldENvbXBhbnlIZWFkZXIoZG9jdW1lbnQpO1xuICAgICAgICBsZXQgbmFtZVdpdGhUaWNrZXJSZW1vdmVkID0gbmFtZS5zcGxpdChcIiAoXCIpWzBdO1xuICAgICAgICBsZXQgdXRpbHMgPSBuZXcgVXRpbHMoKTtcbiAgICAgICAgcmV0dXJuIHV0aWxzLnJlbW92ZUV4dHJhV2hpdGVzcGFjZShuYW1lV2l0aFRpY2tlclJlbW92ZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIHRpY2tlciBzeW1ib2wgaW4gdGhlIHBhZ2UsIGFuZCBzZXBhcmF0ZSBpdCBmcm9tIGFueSB1bm5lY2Vzc2FyeSB0ZXh0XG4gICAgICogd2hpY2ggc3Vycm91bmRzIGl0LlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCAtIERPTSBvZiB0aGUgY3VycmVudCBwYWdlXG4gICAgICogQHBhcmFtIGlzQ3J5cHRvIC0gdHJ1ZSBpZiB0aGUgY3VycmVudCBwYWdlIGlzIGZvciBhIGNyeXB0b2N1cnJlbmN5LFxuICAgICAqIGZhbHNlIG90aGVyd2lzZVxuICAgICAqIEByZXR1cm5zIHRpY2tlciBzeW1ib2xcbiAgICAgKi9cbiAgICBnZXRUaWNrZXJGcm9tUGFnZShkb2N1bWVudDogRG9jdW1lbnQsIGlzQ3J5cHRvOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG5hbWUgPSB0aGlzLmdldENvbXBhbnlIZWFkZXIoZG9jdW1lbnQpO1xuICAgICAgICBsZXQgY2xlYW5lZFVwU3ltYm9sID0gbmFtZS5zcGxpdChcIiAoXCIpWzFdO1xuICAgICAgICBjbGVhbmVkVXBTeW1ib2wgPSBjbGVhbmVkVXBTeW1ib2wuc3BsaXQoXCIpXCIpWzBdO1xuICAgICAgICBpZiAoaXNDcnlwdG8pIHtcbiAgICAgICAgICAgIGNsZWFuZWRVcFN5bWJvbCA9IGNsZWFuZWRVcFN5bWJvbC5zcGxpdChcIi1cIilbMF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xlYW5lZFVwU3ltYm9sO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCAtIERPTSBvZiB0aGUgY3VycmVudCBwYWdlXG4gICAgICogQHJldHVybnMgdGV4dCBjb250ZW50IG9mIHRoZSBjb21wYW55IGhlYWRlciBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0Q29tcGFueUhlYWRlcihkb2N1bWVudDogRG9jdW1lbnQpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuZ2V0UXVvdGVIZWFkZXJJbmZvSWQoKSArIFwiIGgxXCIpXG4gICAgICAgICAgICAudGV4dENvbnRlbnQudHJpbSgpO1xuICAgIH1cblxuICAgIGlzQ3J5cHRvKGRvY3VtZW50OiBEb2N1bWVudCk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgcXVvdGVIZWFkZXJJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgIHRoaXMuZ2V0UXVvdGVIZWFkZXJJbmZvSWQoKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcXVvdGVIZWFkZXJJbmZvLnRleHRDb250ZW50LmluY2x1ZGVzKFwiQ29pbk1hcmtldENhcFwiKTtcbiAgICB9XG5cbiAgICBpc0V0Zihkb2N1bWVudDogRG9jdW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHF1b3RlU3VtbWFyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcXVvdGUtc3VtbWFyeVwiKTtcbiAgICAgICAgbGV0IHV0aWxzID0gbmV3IFV0aWxzKCk7XG5cbiAgICAgICAgbGV0IHRleHRDbGVhbmVkVXAgPSB1dGlscy5yZW1vdmVFeHRyYVdoaXRlc3BhY2UoXG4gICAgICAgICAgICBxdW90ZVN1bW1hcnkudGV4dENvbnRlbnRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRleHRDbGVhbmVkVXAuaW5jbHVkZXMoXCJOZXQgQXNzZXRzXCIpO1xuICAgIH1cblxuICAgIGlzTm9SZXN1bHRzUGFnZShkb2N1bWVudDogRG9jdW1lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb29rdXAtcGFnZVwiKTtcbiAgICB9XG5cbiAgICBpc1RpY2tlclVybCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdXJsLnN0YXJ0c1dpdGgoXCJodHRwczovL2ZpbmFuY2UueWFob28uY29tL3F1b3RlL1wiKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUaWNrZXJUeXBlIH0gZnJvbSBcIi4vVGlja2VyVHlwZVwiO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvVXRpbHNcIjtcblxuZXhwb3J0IGNsYXNzIFRpY2tlciB7XG4gICAgc3ltYm9sOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHRpY2tlclR5cGU6IFRpY2tlclR5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihzeW1ib2w6IHN0cmluZywgbmFtZTogc3RyaW5nLCB0aWNrZXJUeXBlOiBUaWNrZXJUeXBlKSB7XG4gICAgICAgIHRoaXMuc3ltYm9sID0gdGhpcy5jb252ZXJ0SHlwaGVuVG9QZXJpb2Qoc3ltYm9sKTtcbiAgICAgICAgbGV0IHV0aWxzID0gbmV3IFV0aWxzKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IHV0aWxzLnJlbW92ZUV4dHJhV2hpdGVzcGFjZShuYW1lKTtcbiAgICAgICAgdGhpcy50aWNrZXJUeXBlID0gdGlja2VyVHlwZTtcbiAgICB9XG5cbiAgICBjb252ZXJ0SHlwaGVuVG9QZXJpb2Qoc3ltYm9sOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbC5yZXBsYWNlKFwiLVwiLCBcIi5cIik7XG4gICAgfVxuXG4gICAgY29udmVydFBlcmlvZFRvSHlwaGVuKHN5bWJvbDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2wucmVwbGFjZShcIi5cIiwgXCItXCIpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgVGlja2VyIC0gc3ltYm9sOiAke3RoaXMuc3ltYm9sfSwgbmFtZTogJHt0aGlzLm5hbWV9LCB0eXBlOiAke3RoaXMudGlja2VyVHlwZX1gO1xuICAgIH1cblxuICAgIGVxdWFscyh0aGF0OiBUaWNrZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuc3ltYm9sID09PSB0aGF0LnN5bWJvbCAmJlxuICAgICAgICAgICAgdGhpcy5uYW1lRXF1YWxzKHRoYXQubmFtZSkgJiZcbiAgICAgICAgICAgIHRoaXMudGlja2VyVHlwZS5lcXVhbHModGhhdC50aWNrZXJUeXBlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRvIHNlZSBpZiBhIGdpdmVuIGNvbXBhbnkncyBuYW1lIG1hdGNoZXMgdGhpcyBjb21wYW55J3MgbmFtZS5cbiAgICAgKiBTaW5jZSB0aGVzZSB2YWx1ZXMgYXJlIGJlaW5nIHB1bGxlZCBmcm9tIGVhY2ggc2l0ZSB3ZSdyZSB2aXNpdGluZyAoYW5kIHdlIGNhbid0IGNvbnRyb2wgd2hhdCB0aGV5IGNhbGwgdGhlbSksXG4gICAgICogYW5kIHNpbmNlIHRoZXNlIGVxdWFsaXR5IGZ1bmN0aW9ucyBhcmUgKGF0IGxlYXN0IHNvIGZhcikgb25seSBiZWluZyB1c2VkIHRvIGZhY2lsaXRhdGUgdW5pdCB0ZXN0aW5nIGFueXdheSxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIGlzIGJhc2ljYWxseSBqdXN0IGNoZWNraW5nIHRvIHNlZSBpZiB0aGUgbmFtZXMgYXJlIFwiY2xvc2UgZW5vdWdoXCIgYnkgY2hlY2tpbmcgdG8gc2VlIGlmIG9uZSBzdHJpbmcgaW5jbHVkZXMgdGhlIG90aGVyLlxuICAgICAqXG4gICAgICogRm9yIGV4YW1wbGUsIHRoZSBSSCBwYWdlIGZvciAkU1BZIGNhbGxzIGl0IFwiU1BEUiBTJlAgNTAwIEVURlwiLCB3aGlsZSBZRiBjYWxscyBpdCBcIlNQRFIgUyZQIDUwMCBFVEYgVHJ1c3RcIi5cbiAgICAgKiBFdmVuIHRob3VnaCB0aGUgc3RyaW5ncyBhcmVuJ3QgaWRlbnRpY2FsLCB3ZSBzdGlsbCB3YW50IHRoZXNlIHRvIGJlIGNvbnNpZGVyZWQgZXF1YWwsIHNvIHdlIGNhbiBqdXN0IGNoZWNrIGlmIG9uZSBjb250YWlucyB0aGUgb3RoZXIsIHdoaWNoIGl0IGRvZXMuXG4gICAgICpcbiAgICAgKiBUT0RPIC0gdGhlcmUgd2lsbCBwcm9iYWJseSBiZSBzb21lIGVkZ2UgY2FzZXMgZm9yIHdoaWNoIHRoaXMgc29sdXRpb24gd2lsbCBub3Qgd29yaywgc28gdGhpcyB3aWxsIGxpa2VseSBoYXZlIHRvIGJlIHJldmlzZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0aGF0TmFtZSAtIG5hbWUgb2YgdGhlIGNvbXBhbnkgdG8gd2hpY2ggd2UncmUgY29tcGFyaW5nIHRoaXMgY29tcGFueVxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGNvbXBhbmllcycgbmFtZXMgYXJlIHRoZSBzYW1lIChvciBhdCBsZWFzdCwgY2xvc2UgZW5vdWdoKVxuICAgICAqL1xuICAgIG5hbWVFcXVhbHModGhhdE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgdGhpc05hbWUgPSB0aGlzLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdGhhdE5hbWUgPSB0aGF0TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzTmFtZS5pbmNsdWRlcyh0aGF0TmFtZSkgfHwgdGhhdE5hbWUuaW5jbHVkZXModGhpc05hbWUpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBUaWNrZXJUeXBlIHtcbiAgICBWQUxJRF9UWVBFUyA9IFtcInN0b2NrXCIsIFwiZXRmXCIsIFwibXV0dWFsZnVuZFwiLCBcImNyeXB0b1wiLCBcImZ1dHVyZVwiLCBcImJvbmRcIl07XG4gICAgdmFsdWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHRpY2tlclR5cGU6IHN0cmluZykge1xuICAgICAgICB0aWNrZXJUeXBlID0gdGlja2VyVHlwZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZFR5cGUodGlja2VyVHlwZSkpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aWNrZXJUeXBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0aWNrZXJUeXBlOiBcIiArIHRpY2tlclR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHR0IC0gVGlja2VyVHlwZSBhcyBhIHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyB3aXRoaW5cbiAgICAgKiB0aGUgVkFMSURfVFlQRVMgbGlzdCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaXNWYWxpZFR5cGUodHQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5WQUxJRF9UWVBFUy5pbmNsdWRlcyh0dCk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgZXF1YWxzKHRoYXQ6IFRpY2tlclR5cGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IHRoYXQudmFsdWU7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFV0aWxzIHtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxhcmdlIGNodW5rcyBvZiB3aGl0ZXNwYWNlIGZyb20gYSBnaXZlbiBzdHJpbmcsXG4gICAgICogcmVwbGFjaW5nIGVhY2ggd2l0aCBqdXN0IGEgc2luZ2xlIHNwYWNlLlxuICAgICAqIEBwYXJhbSBzdHIgLSB0ZXh0IHdoaWNoIGNvbnRhaW5zIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gICAgICogQHJldHVybnMgc3RyaW5nIHdpdGggZXhjZXNzIHdoaXRlc3BhY2UgcmVtb3ZlZFxuICAgICAqL1xuICAgIHJlbW92ZUV4dHJhV2hpdGVzcGFjZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCByZWdleCA9IG5ldyBSZWdFeHAoXCJcXFxccytcIik7XG4gICAgICAgIGxldCBzcGxpdCA9IHN0ci5zcGxpdChyZWdleCk7XG4gICAgICAgIGxldCBmdWxsID0gXCJcIjtcbiAgICAgICAgc3BsaXQuZm9yRWFjaChmdW5jdGlvbiAod29yZCkge1xuICAgICAgICAgICAgZnVsbCA9IGZ1bGwgKyB3b3JkLnRyaW0oKSArIFwiIFwiO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gR2V0IHJpZCBvZiB0aGUgb25lIGV4dHJhIHNwYWNlIGF0IHRoZSBlbmQgYmVmb3JlIHdlIHJldHVyblxuICAgICAgICByZXR1cm4gZnVsbC50cmltKCk7XG4gICAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgeyBSb2Jpbmhvb2QgfSBmcm9tIFwiLi4vc2l0ZXMvUm9iaW5ob29kXCI7XG5pbXBvcnQgeyBZYWhvb0ZpbmFuY2UgfSBmcm9tIFwiLi4vc2l0ZXMvWWFob29GaW5hbmNlXCI7XG5pbXBvcnQgeyBUaWNrZXIgfSBmcm9tIFwiLi4vdGlja2Vycy9UaWNrZXJcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoZnVuY3Rpb24gaWNvbkNsaWNrZWQoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHNlbmRlcixcbiAgICAgICAgc2VuZFJlc3BvbnNlXG4gICAgKSB7XG4gICAgICAgIGlmIChyZXF1ZXN0Lm1lc3NhZ2UgPT09IFwiY2xpY2tlZF9icm93c2VyX2FjdGlvblwiKSB7XG4gICAgICAgICAgICBsZXQgZnJvbVNpdGU7XG4gICAgICAgICAgICBsZXQgdG9TaXRlO1xuXG4gICAgICAgICAgICBpZiAocmVxdWVzdC51cmwudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhcInJvYmluaG9vZFwiKSkge1xuICAgICAgICAgICAgICAgIGZyb21TaXRlID0gbmV3IFJvYmluaG9vZCgpO1xuICAgICAgICAgICAgICAgIHRvU2l0ZSA9IG5ldyBZYWhvb0ZpbmFuY2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJvbVNpdGUgPSBuZXcgWWFob29GaW5hbmNlKCk7XG4gICAgICAgICAgICAgICAgdG9TaXRlID0gbmV3IFJvYmluaG9vZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZnJvbVNpdGUuaXNUaWNrZXJVcmwocmVxdWVzdC51cmwpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRpY2tlcjogVGlja2VyID0gZnJvbVNpdGUuZ2V0VGlja2VyKHJlcXVlc3QudXJsLCBkb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGlja2VyLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIm9wZW5fbmV3X3RhYlwiLFxuICAgICAgICAgICAgICAgICAgICB0aWNrZXJTeW1ib2w6IHRpY2tlci5zeW1ib2wsXG4gICAgICAgICAgICAgICAgICAgIHRpY2tlck5hbWU6IHRpY2tlci5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB0aWNrZXJUeXBlOiB0aWNrZXIudGlja2VyVHlwZSArIFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiByZXF1ZXN0LmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBmcm9tU2l0ZTogZnJvbVNpdGUuaXMoKSxcbiAgICAgICAgICAgICAgICAgICAgdG9TaXRlOiB0b1NpdGUuaXMoKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIm9wZW5faG9tZXBhZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHJlcXVlc3QuaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGZyb21TaXRlOiBmcm9tU2l0ZS5pcygpLFxuICAgICAgICAgICAgICAgICAgICB0b1NpdGU6IHRvU2l0ZS5pcygpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59KSgpO1xuIl0sIm5hbWVzIjpbImNyZWF0ZVVybEZvclRpY2tlciIsInRpY2tlciIsInRpY2tlclR5cGUiLCJ2YWx1ZSIsInRoaXMiLCJiYXNlVXJsIiwic3ltYm9sIiwiZ2V0VGlja2VyIiwidXJsIiwiZG9jdW1lbnQiLCJnZXRUaWNrZXJGcm9tVXJsIiwiZ2V0TmFtZSIsImdldFRpY2tlclR5cGUiLCJzcGxpdEFycmF5Iiwic3BsaXQiLCJsYXN0SW5kZXgiLCJsZW5ndGgiLCJ0cmltIiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwiaXNDcnlwdG8iLCJpbmNsdWRlcyIsImlzRXRmIiwiaXNOb1Jlc3VsdHNQYWdlIiwiaXNUaWNrZXJVcmwiLCJzdGFydHNXaXRoIiwibmFtZSIsIkVYQ0VQVElPTl9USUNLRVJTIiwiTWFwIiwiaXMiLCJzaXRlIiwiY3J5cHRvQXJnIiwieCIsInNldCIsInMiLCJjb252ZXJ0UGVyaW9kVG9IeXBoZW4iLCJjaGVja0V4Y2VwdGlvbkxpc3QiLCJ0b1N0cmluZyIsInRpY2tlclN0cmluZyIsImdldFRpY2tlckZyb21QYWdlIiwidGlja2VyU3RyIiwidHRTdHIiLCJpc091dGdvaW5nIiwiYXJnQXJyYXkiLCJleGNlcHRpb25JdGVyYXRvciIsImVudHJpZXMiLCJwYWlyIiwia2V5QXJyYXkiLCJ2YWxBcnJheSIsImdldFF1b3RlSGVhZGVySW5mb0lkIiwibmFtZVdpdGhUaWNrZXJSZW1vdmVkIiwiZ2V0Q29tcGFueUhlYWRlciIsInJlbW92ZUV4dHJhV2hpdGVzcGFjZSIsImNsZWFuZWRVcFN5bWJvbCIsInF1b3RlU3VtbWFyeSIsImdldEVsZW1lbnRCeUlkIiwiY29udmVydEh5cGhlblRvUGVyaW9kIiwidXRpbHMiLCJyZXBsYWNlIiwiZXF1YWxzIiwidGhhdCIsIm5hbWVFcXVhbHMiLCJ0aGF0TmFtZSIsInRoaXNOYW1lIiwidG9Mb3dlckNhc2UiLCJWQUxJRF9UWVBFUyIsImlzVmFsaWRUeXBlIiwiRXJyb3IiLCJ0dCIsInN0ciIsInJlZ2V4IiwiUmVnRXhwIiwiZnVsbCIsImZvckVhY2giLCJ3b3JkIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY2hyb21lIiwicnVudGltZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwicmVxdWVzdCIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsIm1lc3NhZ2UiLCJmcm9tU2l0ZSIsInRvU2l0ZSIsImNvbnNvbGUiLCJsb2ciLCJzZW5kTWVzc2FnZSIsInRpY2tlclN5bWJvbCIsInRpY2tlck5hbWUiLCJpbmRleCJdLCJzb3VyY2VSb290IjoiIn0=