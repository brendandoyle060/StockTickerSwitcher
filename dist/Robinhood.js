(()=>{"use strict";var t,e,o,r,n={199:(t,e,o)=>{o.d(e,{T:()=>n});var r=o(110),n=function(){function t(t,e){this.EXCEPTION_TICKERS=new Map,this.name=t,this.baseUrl=e}return t.prototype.is=function(){return this.name},t.prototype.createUrlForTicker=function(t){},t.prototype.getTicker=function(t,e){},t.prototype.getTickerType=function(t,e,o){return t.isEtf(o)?new r.C("etf"):t.isCrypto(e)?new r.C("crypto"):new r.C("stock")},t.prototype.getName=function(t){},t.prototype.isCrypto=function(t){},t.prototype.isEtf=function(t){},t.prototype.isNoResultsPage=function(t){},t}()},219:(t,e,o)=>{o.d(e,{v:()=>n});var r=o(700),n=function(){function t(t,e,o){this.symbol=this.convertHyphenToPeriod(t);var n=new r.c;this.name=n.removeExtraWhitespace(e),this.tickerType=o}return t.prototype.convertHyphenToPeriod=function(t){return t.replace("-",".")},t.prototype.convertPeriodToHyphen=function(t){return t.replace(".","-")},t.prototype.toString=function(){return"Ticker - symbol: ".concat(this.symbol,", name: ").concat(this.name,", type: ").concat(this.tickerType)},t.prototype.equals=function(t){return this.symbol===t.symbol&&this.nameEquals(t.name)&&this.tickerType.equals(t.tickerType)},t.prototype.nameEquals=function(t){var e=this.name.toLowerCase();return t=t.toLowerCase(),e.includes(t)||t.includes(e)},t}()},110:(t,e,o)=>{o.d(e,{C:()=>r});var r=function(){function t(t){if(this.VALID_TYPES=["stock","etf","mutualfund","crypto","future","bond"],t=t.toLowerCase().trim(),!this.isValidType(t))throw new Error("Invalid tickerType: "+t);this.value=t}return t.prototype.isValidType=function(t){return this.VALID_TYPES.includes(t)},t.prototype.toString=function(){return this.value},t.prototype.equals=function(t){return this.value===t.value},t}()},700:(t,e,o)=>{o.d(e,{c:()=>r});var r=function(){function t(){}return t.prototype.removeExtraWhitespace=function(t){var e=new RegExp("\\s+"),o=t.split(e),r="";return o.forEach((function(t){r=r+t.trim()+" "})),r.trim()},t}()}},i={};function c(t){var e=i[t];if(void 0!==e)return e.exports;var o=i[t]={exports:{}};return n[t](o,o.exports,c),o.exports}c.d=(t,e)=>{for(var o in e)c.o(e,o)&&!c.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},c.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),e=c(199),o=c(219),t=function(e,o){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])},t(e,o)},r=function(e,o){if("function"!=typeof o&&null!==o)throw new TypeError("Class extends value "+String(o)+" is not a constructor or null");function r(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(r.prototype=o.prototype,new r)},function(t){function e(){return t.call(this,"Robinhood","https://robinhood.com")||this}r(e,t),e.prototype.createUrlForTicker=function(t){return"crypto"===t.tickerType.value?"".concat(this.baseUrl,"/").concat(t.tickerType.value,"/").concat(t.symbol):"".concat(this.baseUrl,"/stocks/").concat(t.symbol)},e.prototype.getTicker=function(t,e){return new o.v(this.getTickerFromUrl(t),this.getName(e),this.getTickerType(this,t,e))},e.prototype.getTickerFromUrl=function(t){var e=t.split("/"),o=e.length-1,r=e[o];return 0===r.trim().length&&(r=e[o-1]),r},e.prototype.getName=function(t){return t.querySelector("main h1").textContent.trim()},e.prototype.isCrypto=function(t){return t.includes("crypto")},e.prototype.isEtf=function(t){return!(null===t.querySelector("#etf-category"))},e.prototype.isNoResultsPage=function(t){return t.querySelector("html title").textContent.includes("Page not found")}}(e.T)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,